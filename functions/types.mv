<MvFUNCTION NAME = "Load_Type_ID" PARAMETERS = "type_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.type_id" VALUE = "{ trim( l.type_id ) }">
	<MvIF EXPR = "{ ISNULL l.type_id }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
	
	<MvOPENVIEW	NAME	= "Merchant"
				VIEW 	= "GetTypeID"
				QUERY 	= "{ 'SELECT
								*
							FROM ' $
								g.Store_Table_Prefix $ 'bxtTypes
							WHERE
								id = ?'
							}"
				FIELDS	= "l.type_id">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetTypeID">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-2000:', g.MvQUERY_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ GetTypeID.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetTypeID">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( '#Error# Could Not Find TYPE ID' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.type:id"		VALUE = "{ GetTypeID.d.id }">
	<MvASSIGN NAME = "l.type:code"		VALUE = "{ GetTypeID.d.code }">
	<MvASSIGN NAME = "l.type:name"		VALUE = "{ GetTypeID.d.name }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetTypeID">
	<MvFUNCTIONRETURN VALUE = "{ l.type }" />
</MvFUNCTION>

<MvFUNCTION NAME = "Load_Type_Code" PARAMETERS = "code" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.code" VALUE = "{ trim( l.code ) }">
	<MvIF EXPR = "{ ISNULL l.code }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
	
	<MvOPENVIEW	NAME	= "Merchant"
				VIEW 	= "GetTypeCode"
				QUERY 	= "{ 'SELECT
								*
							FROM ' $
								g.Store_Table_Prefix $ 'bxtTypes
							WHERE
								code = ?'
							}"
				FIELDS	= "l.code">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetTypeCode">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-2000:', g.MvQUERY_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ GetTypeCode.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetTypeCode">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( '#Error# Could Not Find CODE' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.type:id"		VALUE = "{ GetTypeCode.d.id }">
	<MvASSIGN NAME = "l.type:code"		VALUE = "{ GetTypeCode.d.code }">
	<MvASSIGN NAME = "l.type:name"		VALUE = "{ GetTypeCode.d.name }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetTypeCode">
	<MvFUNCTIONRETURN VALUE = "{ l.type }" />
</MvFUNCTION>

<MvFUNCTION NAME = "Get_Product_Type" PARAMETERS = "product_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product_id" VALUE = "{ trim( l.product_id ) }">
	<MvIF EXPR = "{ ISNULL l.product_id }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
	
	<MvOPENVIEW	NAME	= "Merchant"
				VIEW 	= "GetProductType"
				QUERY 	= "{ 'SELECT
								*
							FROM ' $
								g.Store_Table_Prefix $ 'bxtTypexProd
							WHERE
								product_id = ?'
							}"
				FIELDS	= "l.product_id">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetProductType">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-5000:', g.MvQUERY_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ GetProductType.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetProductType">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( '#Error# Could Not Find TYPE' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.bxp:type_id" VALUE = "{ GetProductType.d.type_id }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "GetProductType">

	<MvFUNCTIONRETURN VALUE = "{ Load_Type_ID( l.bxp:type_id ) }" />
</MvFUNCTION>

<MvFUNCTION NAME = "AddType" PARAMETERS = "code, name" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.code" VALUE = "{ trim( l.code ) }">
	<MvASSIGN NAME = "l.name" VALUE = "{ trim( l.name ) }">

	<MvIF EXPR = "{ ISNULL l.code }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.name }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ Load_Type_Code( l.code ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
	

	<MvASSIGN NAME = "l.type:id" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'bxtTypes' ) }">

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO  ' $ g.Store_Table_Prefix $ 'bxtTypes
							( id, code, name )
							VALUES
							(?, ?, ?)' }"
			 FIELDS = "l.type:id, l.code, l.name">

	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-6005', g.MvQUERY_Error ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = "{ l.type:id }">
</MvFUNCTION>

<MvFUNCTION NAME = "UpdateType" PARAMETERS = "id, code, name" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.id" VALUE = "{ trim( l.id ) }">
	<MvASSIGN NAME = "l.code" VALUE = "{ trim( l.code ) }">
	<MvASSIGN NAME = "l.name" VALUE = "{ trim( l.name ) }">

	<MvIF EXPR = "{ ISNULL l.id }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.code }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvASSIGN NAME = "l.type_check" VALUE = "{ Load_Type_Code( l.code ) }">
	<MvIF EXPR = "{ NOT ISNULL l.type_check:code AND (l.type_check:id NE l.id) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'UPDATE ' $ g.Store_Table_Prefix $ 'bxtTypes
							SET
								code = ?,
								name = ?
							WHERE
								id = ?' }"
			 FIELDS = "l.code, l.name, l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-6006', g.MvQUERY_Error ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "DeleteType" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.id" VALUE = "{ trim( l.id ) }">
	<MvIF EXPR = "{ ISNULL l.id }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'bxtTypes WHERE id = ?' }"
			 FIELDS = "l.id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-6007', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Type_Insert" PARAMETERS = "code, name" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.code" VALUE = "{ trim( l.code ) }">
	<MvASSIGN NAME = "l.name" VALUE = "{ trim( l.name ) }">

	<MvIF EXPR = "{ ISNULL l.code }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'code', 'Type Code is required.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'code', 'Please enter a Valid Code.' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.name }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'name', 'Type Name is required.' ) }">
	</MvIF>

	<MvIF EXPR = "{ AddType(l.code, l.name) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'code', 'A Type with that Code already exists' ) }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Type_Delete" PARAMETERS = "type_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.type_id" VALUE = "{ trim( l.type_id ) }">

	<MvIF EXPR = "{ ISNULL l.type_id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'id', 'An Error has Occurred.' ) }">
	</MvIF>

	<MvIF EXPR = "{ DeleteType( l.type_id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'id', 'An Error has Occurred.' ) }">
	</MvIF>

</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Type_Update" PARAMETERS = "id, code, name" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.code" VALUE = "{ trim( l.code ) }">
	<MvASSIGN NAME = "l.name" VALUE = "{ trim( l.name ) }">

	<MvIF EXPR = "{ ISNULL l.code }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'code', 'Type Code is required.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Code( l.code ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'code', 'Please enter a Valid Code.' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.name }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'name', 'Type Name is required.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.type_check" VALUE = "{ Load_Type_Code( l.code ) }">
	<MvIF EXPR = "{ NOT ISNULL l.type_check:code AND (l.type_check:id NE l.id) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'code', 'A Type with the code ' $ l.code $ ' already exists.' ) }">
	</MvIF>

	<MvIF EXPR = "{ UpdateType( l.id, l.code, l.name ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	<MvELSE>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'id', 'An Error has Occurred.' ) }">
	</MvIF>

</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Types_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvASSIGN NAME = "g.Filter" VALUE = "{ trim( g.Filter ) }">
	<MvASSIGN NAME = "g.Sort" VALUE = "{ trim( g.Sort ) }">
	<MvASSIGN NAME = "g.Offset" VALUE = "{ trim( g.Offset ) }">
	<MvASSIGN NAME = "g.Count" VALUE = "{ trim( g.Count ) }">
	<MvASSIGN NAME = "l.search_query" VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,'s.*' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'bxtTypes', 's' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, g.Filter,'id:s.id,code:s.code,name:s.name' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields(l.search_query, g.Sort, 'id:s.id,code:s.code,name:s.name', 's.id' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error(g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range('Merchant', 'bxtTypes', l.search_sql, l.search_fields, g.Offset, g.Count) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'BXT-MOD-6003',g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
		{
			"data":
				[
					<MvWHILE EXPR = "{ ( NOT bxtTypes.d.EOF ) AND ( ( g.Count EQ 0 ) OR (l.count LT g.Count ) ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.count )}">
					"id": <MvEVAL EXPR = "{ int( bxtTypes.d.id ) }">,
					"code": "<MvEVAL EXPR = "{ bxtTypes.d.code }">",
					"name": "<MvEVAL EXPR = "{ bxtTypes.d.name }">"
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					<MvSKIP NAME = "Merchant" VIEW = "bxtTypes" ROWS = 1>
					</MvWHILE>
				],

			"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
			"start_offset": <MvEVAL EXPR = "{ int( g.Offset ) }">
		}
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "bxtTypes">
	}

</MvFUNCTION>

<MvFUNCTION NAME = "JSON_ViewTypes_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "html, text, compresswhitespace">
	<MvASSIGN NAME = "g.Filter" VALUE = "{ trim( g.Filter ) }">
	<MvASSIGN NAME = "g.Sort" VALUE = "{ trim( g.Sort ) }">
	<MvASSIGN NAME = "g.Offset" VALUE = "{ trim( g.Offset ) }">
	<MvASSIGN NAME = "g.Count" VALUE = "{ trim( g.Count ) }">
	<MvASSIGN NAME = "g.Type_ID" VALUE = "{ trim( g.Type_ID ) }">

	<MvASSIGN NAME = "l.search_query" VALUE = "">

	<MvIF EXPR = "{ g.Sort EQ 'assigned' }">
		<MvASSIGN NAME = "g.Sort" VALUE = "-assigned">
	<MvELSEIF EXPR = "{ g.Sort EQ '-assigned' }">
		<MvASSIGN NAME = "g.Sort" VALUE = "assigned">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,'c.*, t.type_id' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'Categories', 'c' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'c', g.Store_Table_Prefix $ 'bxtTypexCat', 't', 'c.id = t.cat_id AND t.type_id = ?', 'g.Type_ID' ) }">

	<MvIF EXPR = "{ g.Assigned EQ 1 AND g.Unassigned EQ 0 }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 't.type_id = ?', 'g.Type_ID' ) }">
	<MvELSEIF EXPR = "{ g.Unassigned EQ 1 AND g.Assigned EQ 0 }">
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, 't.type_id IS NULL', '' ) }">
	<MvELSE>
		<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_WHERE( l.search_query, '1', '' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, g.Filter,'assigned:t.type_id,category_id:c.id,category_code:c.code,category_name:c.name,category_active:c.active' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields(l.search_query, g.Sort, 'assigned:t.type_id,category_id:c.id,category_code:c.code,category_name:c.name,category_active:c.active', 'c.disp_order' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error(g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range('Merchant', 'Categories', l.search_sql, l.search_fields, g.Offset, g.Count) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'BXT-MOD-6011',g.MvOPENVIEW_Error ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
		{
			"data":
				[
					<MvWHILE EXPR = "{ ( NOT Categories.d.EOF ) AND ( ( g.Count EQ 0 ) OR (l.count LT g.Count ) ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.count )}">
					"type_id": <MvEVAL EXPR = "{ int( g.Type_ID ) }">,
					"assigned": <MvEVAL EXPR = "{ int( Categories.d.type_id ) }">,
					"category_id": <MvEVAL EXPR = "{ int( Categories.d.id ) }">,
					"category_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Categories.d.code ) }">",
					"category_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( Categories.d.name ) }">",
					"category_active": <MvEVAL EXPR = "{ int( Categories.d.active ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					<MvSKIP NAME = "Merchant" VIEW = "Categories" ROWS = 1>
					</MvWHILE>
				],

			"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
			"start_offset": <MvEVAL EXPR = "{ int( g.Offset ) }">
		}
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "Categories">
	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_TypexCat_Assign_Unassign" PARAMETERS = "type_id, cat_id, assign" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.type_id" VALUE = "{ trim( l.type_id ) }">
	<MvASSIGN NAME = "l.cat_id" VALUE = "{ trim( l.cat_id ) }">
	<MvASSIGN NAME = "l.assign" VALUE = "{ trim( l.assign ) }">

	<MvIF EXPR = "{ ISNULL l.type_id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'type_id', 'Type ID is missing.' ) }">
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.cat_id }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'cat_id', 'Category ID is missing.' ) }">
	</MvIF>

	<MvIF EXPR = "{ l.assign }">
		<MvIF EXPR = "{ NOT TypexCat_Assign( l.type_id, l.cat_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'type_id', 'An Error has occured.' ) }">
		</MvIF>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

	<MvIF EXPR = "{ NOT l.assign }">
		<MvIF EXPR = "{ NOT TypexCat_Unassign( l.type_id, l.cat_id ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'type_id', 'An Error has occured.' ) }">
		</MvIF>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>

</MvFUNCTION>

<MvFUNCTION NAME = "TypexCat_Check" PARAMETERS = "type_id, cat_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.type_id" VALUE = "{ trim( l.type_id ) }">
	<MvASSIGN NAME = "l.cat_id" VALUE = "{ trim( l.cat_id ) }">

	<MvIF EXPR = "{ ISNULL l.type_id OR ISNULL l.cat_id }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvOPENVIEW	NAME	= "Merchant"
				VIEW 	= "bxtTypexCat"
				QUERY 	= "{ 'SELECT
								*
							FROM ' $
								g.Store_Table_Prefix $ 'bxtTypexCat
							WHERE
								type_id = ?
							AND
								cat_id = ?'
							}"
				FIELDS	= "l.type_id, l.cat_id">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "bxtTypexCat">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-6008:', g.MvQUERY_Error ) }">
	</MvIF>

	<MvIF EXPR = "{ bxtTypexCat.d.EOF }">
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "bxtTypexCat">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_DB ].Error_Load_EOF( '#Error# Could Not Find TYPE' ) }">
	</MvIF>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "bxtTypexCat">

	<MvFUNCTIONRETURN VALUE =1 />
</MvFUNCTION>

<MvFUNCTION NAME = "TypexCat_Assign" PARAMETERS = "type_id, cat_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.type_id" VALUE = "{ trim( l.type_id ) }">
	<MvASSIGN NAME = "l.cat_id" VALUE = "{ trim( l.cat_id ) }">

	<MvIF EXPR = "{ ISNULL l.type_id OR ISNULL l.cat_id }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ TypexCat_Check( l.type_id, l.cat_id ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'INSERT INTO  ' $ g.Store_Table_Prefix $ 'bxtTypexCat
							( type_id, cat_id )
							VALUES
							(?, ?)' }"
			 FIELDS = "l.type_id, l.cat_id">

	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-6009', g.MvQUERY_Error ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "TypexCat_Unassign" PARAMETERS = "type_id, cat_id" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.type_id" VALUE = "{ trim( l.type_id ) }">
	<MvASSIGN NAME = "l.cat_id" VALUE = "{ trim( l.cat_id ) }">

	<MvIF EXPR = "{ ISNULL l.type_id OR ISNULL l.cat_id }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>
	
	<MvIF EXPR = "{ NOT TypexCat_Check( l.type_id, l.cat_id ) }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'bxtTypexCat WHERE type_id = ? AND cat_id = ?' }"
			 FIELDS = "l.type_id, l.cat_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'BXT-MOD-6010', g.MvQUERY_Error ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "UpdateProductType" PARAMETERS = "product_id, type_id" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>